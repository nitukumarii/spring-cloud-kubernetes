@Library('jenkins-shared-library@main') _

pipeline {
  agent any

  parameters {
    choice(name: 'action', choices: 'create\nrollback', description: 'Create/rollback of the deployment')
    string(name: 'ImageName', description: "Name of the docker build", defaultValue: "kubernetes-configmap-reload")
    string(name: 'ImageTag', description: "Docker image tag", defaultValue: "v1")
    string(name: 'AppName', description: "Name of the Application", defaultValue: "kubernetes-configmap-reload")
    string(name: 'docker_repo', description: "DockerHub username/repo", defaultValue: "sonali1897")
  }

  tools {
    maven 'maven3' // Ensure this matches your Jenkins global Maven configuration
  }

  stages {

    stage('Git Checkout') {
      when { expression { params.action == 'create' } }
      steps {
        gitCheckout(
          branch: "main",
          url: "https://github.com/DEVOPS-WITH-WEB-DEV/spring-cloud-kubernetes.git"
        )
      }
    }

    stage('Maven Build') {
      when { expression { params.action == 'create' } }
      steps {
        dir("${params.AppName}") {
          sh 'mvn clean package'
        }
      }
    }

    stage('Docker Build and Push') {
      when { expression { params.action == 'create' } }
      steps {
        dir("${params.AppName}") {
          dockerBuild("${params.ImageName}", "${params.docker_repo}", "${params.ImageTag}")
        }
      }
    }

    stage('Docker Cleanup') {
      when { expression { params.action == 'create' } }
      steps {
        dockerCleanup("${params.ImageName}", "${params.docker_repo}", "${params.ImageTag}")
      }
    }

    stage('Ansible Setup') {
      when { expression { params.action == 'create' } }
      steps {
        sh "ansible-playbook ${WORKSPACE}/kubernetes-configmap-reload/server_setup.yml"
      }
    }

    stage('Create Deployment') {
      when { expression { params.action == 'create' } }
      steps {
        sh "echo ${WORKSPACE}"
        sh "kubectl create -f ${WORKSPACE}/kubernetes-configmap-reload/kubernetes-configmap.yml"
      }
    }

    stage('Wait for Pods') {
      when { expression { params.action == 'create' } }
      steps {
        sh 'sleep 300'
      }
    }

    stage('Rollback Deployment') {
      when { expression { params.action == 'rollback' } }
      steps {
        sh """
          kubectl delete deploy ${params.AppName}
          kubectl delete svc ${params.AppName}
        """
      }
    }

  }
}
